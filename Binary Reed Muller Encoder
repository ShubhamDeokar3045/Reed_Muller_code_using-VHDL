-- Binary Reed Muller code Encoder
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


-- Entity declaration

entity BRME is 
	generic(
		m : integer := 3;				-- No. of variables in the polynomial
		r : integer := 3;				-- Degree of the polynomial, 	r is less than or equal to m
		k : integer := 20;			-- No. of input bits, k = (r+m) C (r)
		n : integer := 8); 			-- No. of output bits, n = 2^m
	port(
		I : in std_logic_vector(k-1 downto 0);				-- Input vector
		O : out std_logic_vector(n-1 downto 0));			-- Output vector
end entity; 		

-- Architecture declaration

architecture Behavorial of BRME is

type TwoDimensionalArray is array (natural range <>) of std_logic_vector(n-1 downto 0); 
									-- Defining a matrix type which has n columns
type TwoDimensionalArray1 is array (natural range <>) of std_logic_vector(k-1 downto 0); --
									-- Defining a matrix type which has k columns
signal G1 : TwoDimensionalArray(0 to m);
signal G : TwoDimensionalArray(0 to k-1);


-- The function below performs the matrix multiplication operation, used to multiply matrices A and B of size pxq 
-- and qxr, in this case we have used it to multiply a A1 matrix of 1xk size and G matrix of kxn size which we 
-- used in getting a output vector B of n length

function MAT_MUL(	p : integer := 1;
						q : integer := 3;
						r : integer := 8;
						A : TwoDimensionalArray1;
						B : TwoDimensionalArray) return std_logic_vector is
	
	type TwoDimensionalArray2 is array (natural range <>) of std_logic_vector(r-1 downto 0);
	variable temp : TwoDimensionalArray2(0 to p-1);
	variable sum : TwoDimensionalArray2(0 to p-1);
	variable C1 : TwoDimensionalArray2(0 to p-1);
	variable C : std_logic_vector(p*r-1 downto 0);

begin
	
	for i in 0 to p-1 loop
		for j in 0 to r-1 loop
			temp := (others => (others => '0'));
		  
			for k in 0 to q-1 loop
				temp(i)(j) := temp(i)(j) XOR (A(i)(k) AND B(k)(j));
			end loop;

			sum(i)(j) := temp(i)(j);
		end loop;
   end loop;
		
	C1 := sum;
	
   -- Convert the 2-dimensional matrix C1 to 1-dimensional output array or vector C
		for i in 0 to p-1 loop
			for j in 0 to r-1 loop
				C((i * r) + j) := C1(i)(j);
			end loop;
		end loop;

	return C;
	
end function MAT_MUL;

-- This funciton NCR is used to choose r element out of n elements available

function NCR (	a : integer := n;
					b : integer := r) return integer is
	
	variable x : integer := 0;
	variable y : integer := 0;
	
begin
	
	if ( (b = 0) OR (b = a) ) then
		x := 1;
	elsif ( b > a) then
		x := 0;
	else 
		
		y := b;
		
		if ( b > a - b ) then
			y := a - b;
		end if;
		
		x := 1;
		
		for i in 0 to y-1 loop
			x := x * (a-i);
			x := x / (i+1);
		end loop;
		
	end if; 
	
	return x;
	
end function NCR;

begin 
	
	process(I)
	variable a : integer := 0;
	variable G2 : TwoDimensionalArray(0 to m);
	begin

		for j in 0 to n-1 loop
			G2(0)(j) := '1';
		end loop;
		
		a := NCR( a => m, b => 1);
		
		for i in 1 to a loop
			
			for j in 0 to n-1 loop
				
					if ((j)/ 2**(i-1)) mod 2 = 1 then
						G2(i)((n-1)-j) := '1';
					else 
						G2(i)((n-1)-j) := '0';
					end if;
								
			end loop;
			
		end loop;
		
		G1 <= G2;
		
	end process;
		
	process(G1)
	variable G3 : TwoDimensionalArray(0 to k-1);
	variable a : integer := 0;
	begin
		
		a := 0;
		G3 := (others => (others => '1'));
		
		for b in 0 to r loop
		
			for p in 0 to b loop
				
				for q in 0 to b-p loop
					
					for s in 0 to b-p-q loop
						
						if (p + q + s = b) then
							
							if (s > 0) then
								for i in 0 to s-1 loop
									G3(a) := G3(a) AND G1(1);
								end loop;
							end if;

							if (q > 0) then
								for i in 0 to q-1 loop
									G3(a) := G3(a) AND G1(2);
								end loop;
							end if;

							if (p > 0) then
								for i in 0 to p-1 loop
									G3(a) := G3(a) AND G1(3);
								end loop;
							end if;
							
							a := a + 1;
						
						end if;
						
					end loop;
					
				end loop;

			end loop;
		
		end loop;
		
		G <= G3;
		

	end process;
	
	process (I, G)
	variable I1 : TwoDimensionalArray1(0 to 0);
	begin
	
	-- Used for converting the 1-dimensional input array or vector I to 2-dimensional matrix I1 of 1xk size
		
	for j in 0 to k-1 loop
		I1(0)((k-1)-j) := I(j); 
	end loop;
	
	O <= MAT_MUL(p => 1, q => k, r => n, A => I1, B => G); 
	
	end process;
	
	
end architecture;
