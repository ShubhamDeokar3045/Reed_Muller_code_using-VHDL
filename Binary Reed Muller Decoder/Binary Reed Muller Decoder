-- Binary Reed Muller code Decoder
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


-- Entity declaration

entity BRMD is 
	generic(
		m : integer := 3;				-- No. of variables in the polynomial
		r : integer := 1;				-- Degree of the polynomial, 	r is less than or equal to m
		k : integer := 4;			-- No. of input bits, n = 2^m 
		n : integer := 8); 			-- No. of output bits, k = Summation of (m) C (i) from i = 0 to r
	port(
		I : in std_logic_vector(n-1 downto 0);				-- Input vector
		O : out std_logic_vector(k-1 downto 0));			-- Output vector
end entity; 		

-- Architecture declaration

architecture Behavorial of BRMD is

type TwoDimensionalArray is array (natural range <>) of std_logic_vector(n-1 downto 0); 
									-- Defining a matrix type which has n columns
type TwoDimensionalArray1 is array (natural range <>) of std_logic_vector(k-1 downto 0); --
									-- Defining a matrix type which has k columns
signal G1 : TwoDimensionalArray(0 to m);
signal G : TwoDimensionalArray(0 to k-1);

    -- Define a 2D array (matrix) type with m columns
type TwoDimensionalArray2 is array (natural range <>) of std_logic_vector(m-1 downto 0); 
signal S : TwoDimensionalArray2(0 to k-1);  -- Length of array depends on k
	
-- Function to compute NCR (n choose r)
function NCR ( a : integer;
					b : integer) return integer is
			variable x : integer := 0;
			variable y : integer := 0;
begin
	-- Handle base cases where b = 0 or b = a
	if (b = 0) or (b = a) then
		x := 1;
	elsif (b > a) then
	-- Invalid case, return 0
		x := 0;
	else
	-- Optimization: Choose the smaller of b and a-b
		if (b > a - b) then
			y := a - b;
		else 
			y := b;
		end if;
		
		-- Initialize result x to 1
		x := 1;
		
		-- Loop to calculate the binomial coefficient iteratively (bounded by static y)
		for i in 0 to y-1 loop
			x := x * (a - i);
			x := x / (i + 1);
		end loop;
	end if;

	-- Return the computed binomial coefficient
	return x;

end function NCR;

-- The function below performs the matrix multiplication operation, used to multiply matrices A and B of size pxq 
-- and qxr, in this case we have used it to multiply a A1 matrix of 1xk size and G matrix of kxn size which we 
-- used in getting a output vector B of n length

function MAT_MUL(	p : integer := 1;
						q : integer := 3;
						r : integer := 8;
						A : TwoDimensionalArray1;
						B : TwoDimensionalArray) return std_logic_vector is
	
	type TwoDimensionalArray2 is array (natural range <>) of std_logic_vector(r-1 downto 0);
	variable temp : TwoDimensionalArray2(0 to p-1);
	variable sum : TwoDimensionalArray2(0 to p-1);
	variable C1 : TwoDimensionalArray2(0 to p-1);
	variable C : std_logic_vector(p*r-1 downto 0);

begin
	
	for i in 0 to p-1 loop
		for j in 0 to r-1 loop
			temp := (others => (others => '0'));
		  
			for k in 0 to q-1 loop
				temp(i)(j) := temp(i)(j) XOR (A(i)(k) AND B(k)(j));
			end loop;

			sum(i)(j) := temp(i)(j);
		end loop;
   end loop;
		
	C1 := sum;
	
   -- Convert the 2-dimensional matrix C1 to 1-dimensional output array or vector C
		for i in 0 to p-1 loop
			for j in 0 to r-1 loop
				C((i * r) + j) := C1(i)(j);
			end loop;
		end loop;

	return C;
	
end function MAT_MUL;

function MAJ_DEC (a : integer := 3;
					b : integer := 1;
					I1 : std_logic_Vector(m-1 downto 0);
					I2 : std_logic_vector(n-1 downto 0)) return std_logic is
					
	variable A1 : std_logic_vector(a-1 downto 0);
	variable B1 : std_logic_vector(b-1 downto 0);
	variable U : std_logic_vector(a+b-1 downto 0);
	variable z, w, x1, x3 : integer;
	variable x2 : std_logic_vector((2**a)-1 downto 0);
	
	begin
		
		x3 := 0;
		x2 := (others => '0');
		
		for i in 0 to (2**a)-1 loop
			
			for j in 0 to (2**b)-1 loop
				
				z := 0; 
				w := 0;
				A1 := std_logic_vector(to_unsigned(i, a));
				B1 := std_logic_Vector(to_unsigned(j, b));
				
				for c in 0 to a+b-1 loop
					
					if (I1(c) = '1') then
						if (z < b) then
							U(c) := B1(z);  -- Make sure z is in bounds of B1
							z := z + 1;
						end if;
					else
						if w < a then
							U(c) := A1(w);
							w := w + 1;
						end if;
					end if;
					
				end loop;
				
				x1 := to_integer(unsigned(U));
				x2(i) := x2(i) XOR I2(x1);
				
			end loop;		
			
		end loop;
	
		for j in 0 to (2**a)-1 loop
			
			if (x2(j) = '1') then 
				x3 := x3 + 1;
			end if;
			
		end loop;
		
		if (x3 >= 2**(a-1)) then
			return '1';
		else 
			return '0';
		end if;
		
end function;

begin 
	
	process(I)
	variable G2 : TwoDimensionalArray(0 to m);
	begin

		for j in 0 to n-1 loop
			G2(0)(j) := '1';
		end loop;
		
		
		for i in 1 to m loop
			
			for j in 0 to n-1 loop
				
					if ((j)/ 2**(i-1)) mod 2 = 1 then
						G2(i)((n-1)-j) := '1';
					else 
						G2(i)((n-1)-j) := '0';
					end if;
								
			end loop;
			
		end loop;
		
		G1 <= G2;
		
	end process;
		
	process(I)	
	variable x1, y, z, r2, r1 : integer := 0;
	variable S1 : std_logic_vector(m-1 downto 0);
	variable S2 : TwoDimensionalArray2(0 to k-1);
	begin

		-- Reset z and r2 at the start
		x1 := 0;
		r2 := 0;
		z := 0;
		r1 := 0;
		
		S2 := (others => ( others => '0'));
		
		for j in 0 to r loop
        -- Calculate NCR for each value of x1
        r2 := NCR(m, x1);

        -- Loop to generate sequences and populate array S
        for i in 0 to ((2**m)-1) loop
            if (z /= 2**m) then
                -- Convert integer i to std_logic_vector S1
                S1 := std_logic_vector(to_unsigned(i, m));
                 
                -- Count number of 1s in S1
                y := 0;
                for l in 0 to m-1 loop
                    if S1(l) = '1' then
                        y := y + 1;
                    end if;
                end loop;
                 
                -- Store the sequence if it matches the number of 1s
                if y = x1 then
                    S2(r1) := S1;  -- Store in array S2
                    z := z + 1;
                    r1 := r1 + 1;
                end if;
                 
                -- Increment x1 if z reaches r2
                if z = r2 then
                    x1 := x1 + 1;
                    z := 0;
                    exit;  -- Exit the inner loop when condition is met
                end if;
            else
                exit;  -- Exit the outer loop when z reaches 2^m
            end if;
        end loop;

		end loop;

		
		S <= S2;
			
	end process;
	
	process(S, G1)
	variable G3 : TwoDimensionalArray(0 to k-1);
	begin
				
		G3 := (others => (others => '1'));
		
		for i in 0 to k-1 loop
			for j in 0 to m-1 loop
				if (S(i)(j) = '1') then
					for l in 0 to n-1 loop
						G3(i)(l) := G3(i)(l) AND G1(j + 1)(l);
					end loop;
				end if;
			end loop;
		end loop;
		
		G <= G3;
		

	end process;
	
	process(I, S, G)
	variable z1 : std_logic;
	variable a1, a2, count : integer;
	variable C1 : TwoDimensionalArray1(0 to 0);
	variable C3 : std_logic_vector(k-1 downto 0);
	variable C2, C4 : std_logic_vector(n-1 downto 0);
	variable C5 : std_logic_vector(m-1 downto 0);
	begin
	
		count := 0;
		C2 := I;
		C3 := (others => '0');
		
		for j in 0 to r-1 loop
			
			a1 := NCR(a => m, b => r-j);
			
			C1 := (others => (others => '0'));
			
			for h in 0 to a1-1 loop
				
				C5 := S(k-1-count);
				z1 := MAJ_DEC(a => m-r+j, b => r-j, I1 => C5, I2 => C2);
				C1(0)(k-1-count) := z1;
				C3(k-1-count) := C1(0)(k-1-count);
				count := count + 1;
				
			end loop;

			C4 := MAT_MUL(p => 1, q => k, r => n, A => C1, B => G); 
			C2 := C2 XOR C4;
			
		end loop;	
		
		a2 := 0;
		
		for i in 0 to n-1 loop
			if C2(i) = '1' then
				a2 := a2 + 1;
			end if;
		end loop;
		
		if a2 >= 2**(m-1) then
			C3(0) := '1';
		else 
			C3(0) := '0';
		end if;
		
		O <= C3;
		
	end process;
	
	
end architecture;

